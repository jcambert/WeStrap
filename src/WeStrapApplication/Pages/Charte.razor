@page "/chart"
@using WeC
<WeRow RowColumnCount="WeRowCount.Row1" width="400" height="400">
    <Chart Labels="@Labels" DefaultChartType="line">
        <WeSerie Label="# of Votes" Values="@Votes" LineStyle="ls1" Type="bar" ></WeSerie>
        <WeSerie Label="# of Prices" Values="@Prices" LineStyle="ls2" Fill="false"></WeSerie>
        <WeSerie Label="# of Todos +" Values="@Todos" LineStyle="ls3" Fill="false" ></WeSerie>
    </Chart>
</WeRow>
@code {
    public List<double> Prices { get; set; } = new List<double>() {  };
    public List<double> Votes { get; set; } = new List<double>() { };
    public List<double> Todos { get; set; } = new List<double>() {  };
    public List<string> Labels { get; set; } = new List<string>
        () { "January", "February", "March", "April", "May", "June","July" };

    static WeColor bg1 = WeColor.From(10, 10, 255, 0.2);
    static WeColor bg2 = WeColor.From(10, 255, 10, 1);
    static WeColor bg3 = WeColor.From(255, 255, 10, 1);
    static BorderStyle? bs1 = new BorderStyle() { Width = 2 };
    static BorderStyle? bs2 = new BorderStyle() { Width = 3 };

    public LineStyle ls1 { get; set; } = new LineStyle() { Background = bg1, BorderStyle = bs1 };
    public LineStyle ls2 { get; set; } = new LineStyle() { Background = bg2, BorderStyle = bs2, Fill = "false" };
    public LineStyle ls3 { get; set; } = new LineStyle() { Background = bg3, BorderStyle = bs2, Fill = "false" };

    public WeColor hoverbg { get; set; } = WeColor.From(10, 10, 255, 1);

    private int nbOfValues => Labels.Count();
    private bool auto_gen = true;
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GenerateValues(Prices, nbOfValues, 0, 30);
            GenerateValues(Votes, nbOfValues, 0, 30);
            GenerateValues(Todos, nbOfValues, 0, 30);
            InvokeAsync(() => StateHasChanged());
            if (auto_gen)
                Observable.Interval(TimeSpan.FromSeconds(3)).Subscribe(t =>
                {
                    GenerateValues(Prices, nbOfValues, 0, 30);
                    GenerateValues(Votes, nbOfValues, 0, 30);
                    GenerateValues(Todos, nbOfValues, 0, 30);
                    InvokeAsync(() => StateHasChanged());
                });

        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private void GenerateValues(List<double> liste, int nbre, int from, int to)
    {
        Random rnd = new Random();
        liste.Clear();
        for (int i = 0; i < nbre; i++)
        {
            liste.Add((double)rnd.Next(from, to));
        }
    }
}
