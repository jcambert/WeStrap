<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
 Dictionary<string, string> properties = new Dictionary<string, string>() {
                {"m","Margin"},
                {"p","Padding" }
            };
Dictionary<string, string> sides = new Dictionary<string, string>() {
                {"t","Top"},
                {"b","Bottom" },
				{"l","Left"},
				{"r","Right"},
				{"x","LeftAndRight"},
				{"y","TopAndBottom"}
            };
Dictionary<string, string> breakPoints = new Dictionary<string, string>() {
                {"sm","Small"},
                {"md","Medium" },
				{"lg","Large"},
				{"xl","XtraLarge"},
            };
Dictionary<string,string> displays = new Dictionary<string,string>(){
	{"none","None"},
	{"inline","Inline"},
	{"inline-block","InlineBlock"},
	{"block","Block"},
	{"table","Table"},
	{"table-cell","TableCell"},
	{"table-row","TableRow"},
	{"flex","Flex"},
	{"inline-flex","InlineFlex"}
};
#>
using System.ComponentModel;
namespace WeStrap{
	public enum WeSpacer{
	<# foreach(var property in properties)
		foreach(var side in sides)
			foreach(var point in breakPoints)
				for(var i=0;i<=5;i++)
	{#>
	[Description("<#=property.Key#><#=side.Key#>-<#=point.Key#>-<#=i.ToString()#>")]
		<#=property.Value#><#=side.Value#><#=point.Value#><#=i.ToString()#>,
	<#}#>
	}

	public enum NavBarExpand{
		None,
	<#
		foreach(var point in breakPoints){#>
	[Description("navbar-expand-<#=point.Key#>")]
		Expand<#=point.Value#>,
	<#}
	#>}
	
	public enum Display{
		None,
	<#
		foreach(var point in breakPoints){
			foreach(var display in displays){
			
		#>
	[Description("d-<#=point.Key#>-<#=display.Key#>")]
		<#=point.Value#><#=display.Value#>,
	<#
	}}
	#>}
}