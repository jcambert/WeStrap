@namespace WeStrap
@typeparam TItem
@inherits WeTableBase<TItem>
<CascadingValue Value="this">
    <DynamicTag TagName="table" class="@ClassName" @attributes="UnknownParameters">

        @if (THead != null || (HeadCells?.Any() ?? false))
        {

            <thead class="@HeadColor">

                @if (HeadCells?.Any() ?? false)
                {
                    <WeTableRow>
                        @foreach (var (headCell, index) in HeadCells.WithIndex())
                        {
                            <WeTableHeadCell ColIndex="index" Color="headCell.Color">@headCell.Head</WeTableHeadCell>
                        }
                    </WeTableRow>
                }
                else
                {
                    <WeTableRow>@THead</WeTableRow>
                }
            </thead>
        }
        @if (TBody != null || TBodyGroup != null)
        {
            <tbody>

                @foreach (var (item, index) in Items.WithIndex())
                {

                    @if (IsGroupingList(item))
                    {
                        @TGroup(_currentGroup);
                        @foreach (var (_item, _index) in ((IEnumerable<object>)item).ToList().WithIndex())
                        {
                            <WeTableRow OnRowHover="@(() => OnRowMouseOver.InvokeAsync(item))" OnRowOut="@(() => OnRowMouseOut.InvokeAsync(item))">
                                @TBodyGroup(new ItemWithIndex<object>() { Item = _item, Index = _index })
                            </WeTableRow>
                        }
                    }
                    else
                    {
                        <WeTableRow @onclick="@(() => OnRowClick.InvokeAsync(item))" OnRowHover="@(() => OnRowMouseOver.InvokeAsync(item))" OnRowOut="@(() => OnRowMouseOut.InvokeAsync(item))">
                            @TBody(new ItemWithIndex<TItem>() { Item = item, Index = index })
                        </WeTableRow>
                    }

                }
                @ChildContent
            </tbody>
        }
        @if (TFoot != null)
        {
            <tfoot>
                <WeTableRow>@TFoot</WeTableRow>
            </tfoot>
        }


    </DynamicTag>
</CascadingValue>
@code{
    private string HeadColor => UseHeadCellColor ? "" : TableHeadType.ToDescriptionString();
    private object _currentGroup;
    [Parameter] public EventCallback<TItem> OnRowClick { get; set; }
    [Parameter] public EventCallback<TItem> OnRowMouseOver { get; set; }
    [Parameter] public EventCallback<TItem> OnRowMouseOut { get; set; }
    void MouseAction(MouseEventArgs args) { }
    private bool IsGroupingList(TItem item)
    {
        
        //typeof(IGrouping<,>).IsAssignableFrom(Items.GetType());
        var type = item.GetType();
        var keyProp = type.GetProperty("Key");
        if (keyProp == null) return false;
        var currentGroup = keyProp.GetGetMethod().Invoke(item, null);
        var nb = type.GetGenericArguments().Count();
        var result = nb == 2;
        if (_currentGroup != currentGroup)
        {
            _currentGroup = currentGroup;
            return result;
        }
        return false;
    }


}